@page "/chat/{RoomId:guid}"
@using Microsoft.AspNetCore.SignalR.Client
@using WebApp.Services
@inject ChatService ChatSvc
@inject AppState State
@inject NavigationManager Nav
@inject AuthService Auth
@inject IJSRuntime JS

<h3 style="padding:16px">Room: @RoomId</h3>

@if (!State.IsAuthenticated)
{
    <p style="padding:16px">Please sign in.</p>
}
else
{
    <div class="chat">
        <div class="messages" @ref="messagesDiv">
            @foreach (var m in messages)
            {
                var cls = m.IsBotMessage ? "msg bot" : (m.UserName == State.UserName ? "msg you" : "msg");
                <div class="@cls">
                    <div class="meta">@m.UserName Â· @m.CreatedAtUtc.ToLocalTime().ToString("HH:mm:ss")</div>
                    <div>@m.Content</div>
                </div>
            }
        </div>
        <div class="input-row">
            <input class="input" placeholder="Type a message... (/stock=aapl.us)" @bind="input" @onkeydown="HandleKey" />
            <button class="btn primary" @onclick="Send" disabled="@(hub?.State != HubConnectionState.Connected)">Send</button>
        </div>
    </div>
}

@code {
    [Parameter] public Guid RoomId { get; set; }

    private List<ChatMessageDto> messages = new();
    private string input = string.Empty;
    private ElementReference messagesDiv;
    private HubConnection? hub;

    protected override async Task OnInitializedAsync()
    {
        // Ensure auth state is hydrated on refresh
        if (!State.IsAuthenticated)
        {
            var ok = await Auth.MeAsync();
            if (!ok) return;
        }

        // Setup SignalR connection
        await SetupSignalRConnection();
    }

    private async Task SetupSignalRConnection()
    {
        try
        {
            hub = await ChatSvc.ConnectAsync(RoomId);

            // Handle incoming messages - try strongly typed first
            hub.On<ChatMessageDto>("ReceiveMessage", async (message) =>
            {
                try
                {
                    Console.WriteLine($"Received message: {message.Content} from {message.UserName}");

                    // Add message to list
                    messages.Add(message);

                    // Trigger UI update
                    await InvokeAsync(StateHasChanged);

                    // Scroll to bottom
                    await ScrollToBottom();
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error processing received message: {ex.Message}");
                }
            });

            // If the above doesn't work, uncomment this alternative approach:
            /*
            hub.On<object>("ReceiveMessage", async (payload) =>
            {
                try
                {
                    Console.WriteLine($"Raw payload: {System.Text.Json.JsonSerializer.Serialize(payload)}");
                    
                    var doc = System.Text.Json.JsonDocument.Parse(System.Text.Json.JsonSerializer.Serialize(payload));
                    var root = doc.RootElement;
                    
                    // Check if all required properties exist before accessing them
                    if (!root.TryGetProperty("Id", out var idProp) ||
                        !root.TryGetProperty("Content", out var contentProp) ||
                        !root.TryGetProperty("UserName", out var userNameProp) ||
                        !root.TryGetProperty("CreatedAtUtc", out var createdProp) ||
                        !root.TryGetProperty("IsBotMessage", out var isBotProp))
                    {
                        Console.WriteLine("Missing required properties in message payload");
                        Console.WriteLine($"Available properties: {string.Join(", ", root.EnumerateObject().Select(p => p.Name))}");
                        return;
                    }
                    
                    var newMessage = new ChatMessageDto
                    {
                        Id = idProp.GetGuid(),
                        Content = contentProp.GetString() ?? "",
                        UserName = userNameProp.GetString() ?? "",
                        CreatedAtUtc = createdProp.GetDateTime(),
                        IsBotMessage = isBotProp.GetBoolean()
                    };
                    
                    // Add message to list
                    messages.Add(newMessage);
                    
                    // Trigger UI update
                    await InvokeAsync(StateHasChanged);
                    
                    // Scroll to bottom
                    await ScrollToBottom();
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error processing received message: {ex.Message}");
                    Console.WriteLine($"Payload type: {payload?.GetType()}");
                }
            });
            */

            // Handle message loading
            hub.On<IEnumerable<ChatMessageDto>>("LoadMessages", async (msgs) =>
            {
                messages = msgs.ToList();
                await InvokeAsync(StateHasChanged);
                await ScrollToBottom();
            });

            // Join the room
            await ChatSvc.JoinRoomAsync(hub, RoomId);
            await ScrollToBottom();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error setting up SignalR connection: {ex.Message}");
        }
    }

    private async Task Send()
    {
        var content = input?.Trim();
        if (string.IsNullOrWhiteSpace(content) || hub is null || hub.State != HubConnectionState.Connected)
            return;

        try
        {
            await ChatSvc.SendMessageAsync(hub, RoomId, content);
            input = "";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error sending message: {ex.Message}");
        }
    }

    private async Task HandleKey(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
            await Send();
    }

    private async Task ScrollToBottom()
    {
        try
        {
            await Task.Delay(50); // Give time for DOM to update
            await JS.InvokeVoidAsync("scrollToBottom", messagesDiv);
        }
        catch
        {
            // Fallback if JS fails
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hub is not null)
        {
            try
            {
                await ChatSvc.LeaveRoomAsync(hub, RoomId);
                await hub.DisposeAsync();
            }
            catch
            {
                // Ignore disposal errors
            }
        }
    }
}

<script>
    window.scrollToBottom = (element) => {
        if (element) {
            element.scrollTop = element.scrollHeight;
        }
    };
</script>

<style>
    .messages {
        max-height: 400px;
        overflow-y: auto;
        padding: 10px;
        border: 1px solid #ddd;
        margin-bottom: 10px;
    }

    .msg {
        margin-bottom: 10px;
        padding: 8px;
        border-radius: 4px;
        background-color: #f5f5f5;
    }

    .msg.you {
        background-color: #dcf8c6;
        margin-left: 20px;
    }

    .msg.bot {
        background-color: #e3f2fd;
        margin-right: 20px;
    }

    .meta {
        font-size: 0.8em;
        color: #666;
        margin-bottom: 4px;
    }

    .input-row {
        display: flex;
        gap: 10px;
    }

    .input {
        flex: 1;
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
    }

    .btn {
        padding: 8px 16px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    .btn.primary {
        background-color: #007bff;
        color: white;
    }

    .btn:disabled {
        background-color: #ccc;
        cursor: not-allowed;
    }
</style>